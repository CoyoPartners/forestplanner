# Generated by Django 2.1.7 on 2019-02-28 11:57

from django.conf import settings
import django.contrib.gis.db.models.fields
import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion
import trees.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='CarbonGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Date Created')),
                ('date_modified', models.DateTimeField(auto_now=True, verbose_name='Date Modified')),
                ('object_id', models.PositiveIntegerField(blank=True, null=True)),
                ('manipulators', models.TextField(blank=True, help_text='csv list of manipulators to be applied', null=True, verbose_name='Manipulator List')),
                ('geometry_orig', django.contrib.gis.db.models.fields.PolygonField(blank=True, null=True, srid=3857, verbose_name='Original Polygon Geometry')),
                ('geometry_final', django.contrib.gis.db.models.fields.PolygonField(blank=True, null=True, srid=3857, verbose_name='Final Polygon Geometry')),
                ('description', models.TextField()),
                ('private', models.BooleanField(default=False)),
                ('content_type', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_DEFAULT, related_name='trees_carbongroup_related', to='contenttypes.ContentType')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ConditionVariantLookup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cond_id', models.BigIntegerField(db_index=True)),
                ('variant_code', models.CharField(max_length=2)),
            ],
        ),
        migrations.CreateModel(
            name='County',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fips', models.IntegerField()),
                ('cntyname', models.CharField(max_length=23)),
                ('polytype', models.IntegerField()),
                ('stname', models.CharField(max_length=2)),
                ('soc_cnty', models.IntegerField()),
                ('cnty_fips', models.IntegerField()),
                ('st_fips', models.IntegerField()),
                ('geom', django.contrib.gis.db.models.fields.MultiPolygonField(srid=3857)),
            ],
        ),
        migrations.CreateModel(
            name='ForestProperty',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Date Created')),
                ('date_modified', models.DateTimeField(auto_now=True, verbose_name='Date Modified')),
                ('object_id', models.PositiveIntegerField(blank=True, null=True)),
                ('geometry_final', django.contrib.gis.db.models.fields.MultiPolygonField(blank=True, null=True, srid=3857, verbose_name='Forest Property MultiPolygon Geometry')),
                ('carbon_group', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_DEFAULT, to='trees.CarbonGroup')),
                ('content_type', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_DEFAULT, related_name='trees_forestproperty_related', to='contenttypes.ContentType')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FVSAggregate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('agl', models.FloatField(blank=True, null=True)),
                ('bgl', models.FloatField(blank=True, null=True)),
                ('calc_carbon', models.FloatField(blank=True, null=True)),
                ('cond', models.IntegerField()),
                ('dead', models.FloatField(blank=True, null=True)),
                ('offset', models.IntegerField()),
                ('rx', models.IntegerField()),
                ('site', models.IntegerField()),
                ('total_stand_carbon', models.FloatField(blank=True, null=True)),
                ('var', models.CharField(max_length=2)),
                ('year', models.FloatField()),
                ('merch_carbon_removed', models.FloatField(blank=True, null=True)),
                ('merch_carbon_stored', models.FloatField(blank=True, null=True)),
                ('cedr_bf', models.FloatField(blank=True, null=True)),
                ('cedr_hrv', models.FloatField(blank=True, null=True)),
                ('ch_cf', models.FloatField(blank=True, null=True)),
                ('ch_hw', models.FloatField(blank=True, null=True)),
                ('ch_tpa', models.FloatField(blank=True, null=True)),
                ('cut_type', models.FloatField(blank=True, null=True)),
                ('df_bf', models.FloatField(blank=True, null=True)),
                ('df_hrv', models.FloatField(blank=True, null=True)),
                ('es_btl', models.FloatField(blank=True, null=True)),
                ('firehzd', models.FloatField(blank=True, null=True)),
                ('hw_bf', models.FloatField(blank=True, null=True)),
                ('hw_hrv', models.FloatField(blank=True, null=True)),
                ('lg_cf', models.FloatField(blank=True, null=True)),
                ('lg_hw', models.FloatField(blank=True, null=True)),
                ('lg_tpa', models.FloatField(blank=True, null=True)),
                ('lp_btl', models.FloatField(blank=True, null=True)),
                ('mnconbf', models.FloatField(blank=True, null=True)),
                ('mnconhrv', models.FloatField(blank=True, null=True)),
                ('mnhw_bf', models.FloatField(blank=True, null=True)),
                ('mnhw_hrv', models.FloatField(blank=True, null=True)),
                ('nsodis', models.FloatField(blank=True, null=True)),
                ('nsofrg', models.FloatField(blank=True, null=True)),
                ('nsonest', models.FloatField(blank=True, null=True)),
                ('pine_bf', models.FloatField(blank=True, null=True)),
                ('pine_hrv', models.FloatField(blank=True, null=True)),
                ('pp_btl', models.FloatField(blank=True, null=True)),
                ('sm_cf', models.FloatField(blank=True, null=True)),
                ('sm_hw', models.FloatField(blank=True, null=True)),
                ('sm_tpa', models.FloatField(blank=True, null=True)),
                ('spprich', models.FloatField(blank=True, null=True)),
                ('sppsimp', models.FloatField(blank=True, null=True)),
                ('sprc_bf', models.FloatField(blank=True, null=True)),
                ('sprc_hrv', models.FloatField(blank=True, null=True)),
                ('wj_bf', models.FloatField(blank=True, null=True)),
                ('wj_hrv', models.FloatField(blank=True, null=True)),
                ('ww_bf', models.FloatField(blank=True, null=True)),
                ('ww_hrv', models.FloatField(blank=True, null=True)),
                ('after_ba', models.IntegerField(blank=True, null=True)),
                ('after_merch_bdft', models.IntegerField(blank=True, null=True)),
                ('after_merch_ft3', models.IntegerField(blank=True, null=True)),
                ('after_total_ft3', models.IntegerField(blank=True, null=True)),
                ('after_tpa', models.IntegerField(blank=True, null=True)),
                ('age', models.IntegerField(blank=True, null=True)),
                ('removed_merch_bdft', models.IntegerField(blank=True, null=True)),
                ('removed_merch_ft3', models.IntegerField(blank=True, null=True)),
                ('removed_total_ft3', models.IntegerField(blank=True, null=True)),
                ('removed_tpa', models.IntegerField(blank=True, null=True)),
                ('start_ba', models.IntegerField(blank=True, null=True)),
                ('start_merch_bdft', models.IntegerField(blank=True, null=True)),
                ('start_merch_ft3', models.IntegerField(blank=True, null=True)),
                ('start_total_ft3', models.IntegerField(blank=True, null=True)),
                ('start_tpa', models.IntegerField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='FVSSpecies',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('usda', models.CharField(blank=True, max_length=8, null=True)),
                ('fia', models.CharField(blank=True, max_length=3, null=True)),
                ('fvs', models.CharField(blank=True, max_length=2, null=True)),
                ('common', models.TextField()),
                ('scientific', models.TextField()),
                ('AK', models.CharField(max_length=2)),
                ('BM', models.CharField(max_length=2)),
                ('CA', models.CharField(max_length=2)),
                ('CI', models.CharField(max_length=2)),
                ('CR', models.CharField(max_length=2)),
                ('EC', models.CharField(max_length=2)),
                ('EM', models.CharField(max_length=2)),
                ('IE', models.CharField(max_length=2)),
                ('KT', models.CharField(max_length=2)),
                ('NC', models.CharField(max_length=2)),
                ('NI', models.CharField(max_length=2)),
                ('PN', models.CharField(max_length=2)),
                ('SO', models.CharField(max_length=2)),
                ('TT', models.CharField(max_length=2)),
                ('UT', models.CharField(max_length=2)),
                ('WC', models.CharField(max_length=2)),
                ('WS', models.CharField(max_length=2)),
            ],
        ),
        migrations.CreateModel(
            name='FVSVariant',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=3)),
                ('fvsvariant', models.CharField(max_length=100)),
                ('decision_tree_xml', models.TextField(default='')),
                ('geom', django.contrib.gis.db.models.fields.MultiPolygonField(srid=3857)),
            ],
        ),
        migrations.CreateModel(
            name='IdbSummary',
            fields=[
                ('plot_id', models.BigIntegerField(blank=True, null=True)),
                ('cond_id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('sumofba_ft2', models.FloatField(blank=True, null=True)),
                ('avgofba_ft2_ac', models.FloatField(blank=True, null=True)),
                ('avgofht_ft', models.FloatField(blank=True, null=True)),
                ('avgoftpa', models.FloatField(blank=True, null=True)),
                ('avgofdbh_in', models.FloatField(blank=True, null=True)),
                ('state_name', models.CharField(blank=True, max_length=40, null=True)),
                ('county_name', models.CharField(blank=True, max_length=100, null=True)),
                ('halfstate_name', models.CharField(blank=True, max_length=100, null=True)),
                ('forest_name', models.CharField(blank=True, max_length=510, null=True)),
                ('acres', models.FloatField(blank=True, null=True)),
                ('acres_vol', models.FloatField(blank=True, null=True)),
                ('fia_forest_type_name', models.CharField(blank=True, max_length=60, null=True)),
                ('latitude_fuzz', models.FloatField(blank=True, null=True)),
                ('longitude_fuzz', models.FloatField(blank=True, null=True)),
                ('aspect_deg', models.IntegerField(blank=True, null=True)),
                ('stdevofaspect_deg', models.FloatField(blank=True, null=True)),
                ('firstofaspect_deg', models.IntegerField(blank=True, null=True)),
                ('slope', models.IntegerField(blank=True, null=True)),
                ('stdevofslope', models.FloatField(blank=True, null=True)),
                ('avgofslope', models.FloatField(blank=True, null=True)),
                ('elev_ft', models.IntegerField(blank=True, null=True)),
                ('fvs_variant', models.CharField(blank=True, max_length=4, null=True)),
                ('site_species', models.IntegerField(blank=True, null=True)),
                ('site_index_fia', models.IntegerField(blank=True, null=True)),
                ('plant_assoc_code', models.CharField(blank=True, max_length=20, null=True)),
                ('countofsubplot_id', models.BigIntegerField(blank=True, null=True)),
                ('qmd_hwd_cm', models.FloatField(blank=True, null=True)),
                ('qmd_swd_cm', models.FloatField(blank=True, null=True)),
                ('qmd_tot_cm', models.FloatField(blank=True, null=True)),
                ('calc_aspect', models.IntegerField(blank=True, null=True)),
                ('calc_slope', models.IntegerField(blank=True, null=True)),
                ('stand_size_class', models.IntegerField(blank=True, null=True)),
                ('site_class_fia', models.IntegerField(blank=True, null=True)),
                ('stand_age_even_yn', models.CharField(blank=True, max_length=2, null=True)),
                ('stand_age', models.IntegerField(blank=True, null=True)),
                ('for_type', models.IntegerField(blank=True, null=True)),
                ('for_type_secdry', models.IntegerField(blank=True, null=True)),
                ('for_type_name', models.CharField(blank=True, max_length=60, null=True)),
                ('for_type_secdry_name', models.CharField(blank=True, max_length=60, null=True)),
                ('qmdc_dom', models.FloatField(blank=True, null=True)),
                ('qmdh_dom', models.FloatField(blank=True, null=True)),
                ('qmda_dom', models.FloatField(blank=True, null=True)),
                ('cancov', models.FloatField(blank=True, null=True)),
                ('stndhgt', models.FloatField(blank=True, null=True)),
                ('sdi', models.FloatField(blank=True, null=True)),
                ('sdi_reineke', models.FloatField(blank=True, null=True)),
                ('age_dom', models.FloatField(blank=True, null=True)),
                ('vegclassr', models.SmallIntegerField(blank=True, null=True)),
                ('vegclass', models.SmallIntegerField(blank=True, null=True)),
                ('struccondr', models.SmallIntegerField(blank=True, null=True)),
                ('struccond', models.SmallIntegerField(blank=True, null=True)),
                ('sizecl', models.SmallIntegerField(blank=True, null=True)),
                ('covcl', models.SmallIntegerField(blank=True, null=True)),
                ('ogsi', models.FloatField(blank=True, null=True)),
                ('bac_prop', models.FloatField(blank=True, null=True)),
                ('tph_ge_3', models.FloatField(blank=True, null=True)),
                ('mai', models.FloatField(blank=True, null=True)),
                ('owner', models.IntegerField(blank=True, null=True)),
                ('own_group', models.IntegerField(blank=True, null=True)),
                ('bah_ge_3', models.FloatField(blank=True, null=True)),
                ('bac_ge_3', models.FloatField(blank=True, null=True)),
                ('baa_ge_3', models.FloatField(blank=True, null=True)),
                ('qmda_dom_stunits', models.FloatField(blank=True, null=True)),
                ('stndhgt_stunits', models.FloatField(blank=True, null=True)),
                ('baa_ge_3_stunits', models.FloatField(blank=True, null=True)),
                ('tph_ge_3_stunits', models.FloatField(blank=True, null=True)),
            ],
            options={
                'db_table': 'idb_summary',
            },
        ),
        migrations.CreateModel(
            name='Membership',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_requested', models.DateTimeField(auto_now_add=True)),
                ('date_modified', models.DateTimeField(auto_now=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('accepted', 'Accepted'), ('declined', 'Declined'), ('revoked', 'Revoked')], default='pending', max_length=10)),
                ('reason', models.TextField(blank=True)),
                ('applicant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='trees.CarbonGroup')),
            ],
        ),
        migrations.CreateModel(
            name='MyRx',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Date Created')),
                ('date_modified', models.DateTimeField(auto_now=True, verbose_name='Date Modified')),
                ('object_id', models.PositiveIntegerField(blank=True, null=True)),
                ('description', models.TextField(default='')),
                ('content_type', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_DEFAULT, related_name='trees_myrx_related', to='contenttypes.ContentType')),
            ],
            options={
                'ordering': ['date_modified'],
            },
        ),
        migrations.CreateModel(
            name='Rx',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('internal_name', models.TextField()),
                ('internal_desc', models.TextField()),
                ('internal_type', models.CharField(choices=[('NA', 'N/A'), ('GO', 'Grow Only, No Management Actions'), ('CI', 'Conventional, Even-aged, Short rotation')], default='NA', max_length=2)),
                ('variant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='trees.FVSVariant')),
            ],
        ),
        migrations.CreateModel(
            name='Scenario',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Date Created')),
                ('date_modified', models.DateTimeField(auto_now=True, verbose_name='Date Modified')),
                ('object_id', models.PositiveIntegerField(blank=True, null=True)),
                ('description', models.TextField(blank=True, default='', null=True, verbose_name='Description/Notes')),
                ('input_target_boardfeet', models.FloatField(blank=True, help_text='Target an even flow of timber', null=True, verbose_name='Target Boardfeet')),
                ('input_age_class', models.FloatField(blank=True, help_text='Optimize for target proportion of mature trees', null=True, verbose_name='Target Mature Age Class')),
                ('input_target_carbon', models.BooleanField(default=False, help_text='Optimize harvest schedule for carbon sequestration', verbose_name='Target Carbon')),
                ('input_rxs', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default='{}', null=True, verbose_name='Prescriptions associated with each stand')),
                ('spatial_constraints', models.TextField(default='', verbose_name='CSV List of spatial constraints to apply')),
                ('output_scheduler_results', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('content_type', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_DEFAULT, related_name='trees_scenario_related', to='contenttypes.ContentType')),
                ('input_property', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='trees.ForestProperty')),
                ('sharing_groups', models.ManyToManyField(blank=True, editable=False, null=True, related_name='trees_scenario_related', to='auth.Group', verbose_name='Share with the following groups')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='trees_scenario_related', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-date_modified'],
            },
        ),
        migrations.CreateModel(
            name='ScenarioStand',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Date Created')),
                ('date_modified', models.DateTimeField(auto_now=True, verbose_name='Date Modified')),
                ('object_id', models.PositiveIntegerField(blank=True, null=True)),
                ('manipulators', models.TextField(blank=True, help_text='csv list of manipulators to be applied', null=True, verbose_name='Manipulator List')),
                ('geometry_orig', django.contrib.gis.db.models.fields.PolygonField(blank=True, null=True, srid=3857, verbose_name='Original Polygon Geometry')),
                ('geometry_final', django.contrib.gis.db.models.fields.PolygonField(blank=True, null=True, srid=3857, verbose_name='Final Polygon Geometry')),
                ('cond_id', models.BigIntegerField()),
                ('rx_internal_num', models.IntegerField(blank=True, null=True)),
                ('acres', models.FloatField()),
                ('offset', models.IntegerField(default=0)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SpatialConstraint',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('geom', django.contrib.gis.db.models.fields.PolygonField(srid=3857)),
                ('category', models.CharField(choices=[('R1', 'RiparianBuffers1'), ('R2', 'RiparianBuffers2')], max_length=2)),
                ('default_rx', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='trees.Rx')),
            ],
        ),
        migrations.CreateModel(
            name='Stand',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Date Created')),
                ('date_modified', models.DateTimeField(auto_now=True, verbose_name='Date Modified')),
                ('object_id', models.PositiveIntegerField(blank=True, null=True)),
                ('manipulators', models.TextField(blank=True, help_text='csv list of manipulators to be applied', null=True, verbose_name='Manipulator List')),
                ('geometry_orig', django.contrib.gis.db.models.fields.PolygonField(blank=True, null=True, srid=3857, verbose_name='Original Polygon Geometry')),
                ('geometry_final', django.contrib.gis.db.models.fields.PolygonField(blank=True, null=True, srid=3857, verbose_name='Final Polygon Geometry')),
                ('cond_id', models.BigIntegerField(blank=True, default=None, null=True)),
                ('locked_cond_id', models.BigIntegerField(blank=True, default=None, null=True)),
                ('elevation', models.FloatField(blank=True, null=True)),
                ('slope', models.FloatField(blank=True, null=True)),
                ('aspect', models.FloatField(blank=True, null=True)),
                ('cost', models.FloatField(blank=True, null=True)),
                ('nn_savetime', models.FloatField(default=0.0)),
                ('rast_savetime', models.FloatField(default=0.0)),
                ('content_type', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_DEFAULT, related_name='trees_stand_related', to='contenttypes.ContentType')),
                ('sharing_groups', models.ManyToManyField(blank=True, editable=False, null=True, related_name='trees_stand_related', to='auth.Group', verbose_name='Share with the following groups')),
            ],
            options={
                'abstract': False,
            },
            bases=(trees.models.DirtyFieldsMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Strata',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Date Created')),
                ('date_modified', models.DateTimeField(auto_now=True, verbose_name='Date Modified')),
                ('object_id', models.PositiveIntegerField(blank=True, null=True)),
                ('search_age', models.FloatField()),
                ('search_tpa', models.FloatField()),
                ('additional_desc', models.TextField(blank=True, null=True)),
                ('stand_list', django.contrib.postgres.fields.jsonb.JSONField()),
                ('content_type', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_DEFAULT, related_name='trees_strata_related', to='contenttypes.ContentType')),
                ('sharing_groups', models.ManyToManyField(blank=True, editable=False, null=True, related_name='trees_strata_related', to='auth.Group', verbose_name='Share with the following groups')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='trees_strata_related', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
            bases=(trees.models.DirtyFieldsMixin, models.Model),
        ),
        migrations.CreateModel(
            name='TimberPrice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timber_type', models.CharField(choices=[('cedr_hrv', 'Cedar'), ('df_hrv', 'Doug fir'), ('hw_hrv', 'Major Hardwood'), ('mnconhrv', 'Minor Conifer'), ('mnhw_hrv', 'Minor Hardwood'), ('pine_hrv', 'Pine'), ('wj_hrv', 'Western Juniper'), ('ww_hrv', 'White Wood'), ('sprc_hrv', 'Spruce')], max_length=10)),
                ('price', models.FloatField()),
                ('variant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='trees.FVSVariant')),
            ],
        ),
        migrations.CreateModel(
            name='TreeliveSummary',
            fields=[
                ('class_id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('plot_id', models.BigIntegerField(blank=True, null=True)),
                ('cond_id', models.BigIntegerField(blank=True, null=True)),
                ('varname', models.CharField(blank=True, max_length=60)),
                ('fia_forest_type_name', models.CharField(blank=True, max_length=60)),
                ('calc_dbh_class', models.FloatField(blank=True, null=True)),
                ('calc_tree_count', models.IntegerField(blank=True, null=True)),
                ('sumoftpa', models.FloatField(blank=True, null=True)),
                ('avgoftpa', models.FloatField(blank=True, null=True)),
                ('sumofba_ft2_ac', models.FloatField(blank=True, null=True)),
                ('avgofba_ft2_ac', models.FloatField(blank=True, null=True)),
                ('avgofht_ft', models.FloatField(blank=True, null=True)),
                ('avgofdbh_in', models.FloatField(blank=True, null=True)),
                ('avgofage_bh', models.FloatField(blank=True, null=True)),
                ('total_ba_ft2_ac', models.FloatField(blank=True, null=True)),
                ('count_speciessizeclasses', models.IntegerField(blank=True, null=True)),
                ('pct_of_totalba', models.FloatField(blank=True, null=True)),
                ('variant', models.CharField(blank=True, default=None, max_length=10, null=True)),
                ('fvs_spp_code', models.CharField(blank=True, default=None, max_length=10, null=True)),
            ],
            options={
                'db_table': 'treelive_summary',
            },
        ),
        migrations.AddField(
            model_name='stand',
            name='strata',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='trees.Strata'),
        ),
        migrations.AddField(
            model_name='stand',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='trees_stand_related', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='scenariostand',
            name='constraint',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_DEFAULT, to='trees.SpatialConstraint'),
        ),
        migrations.AddField(
            model_name='scenariostand',
            name='content_type',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_DEFAULT, related_name='trees_scenariostand_related', to='contenttypes.ContentType'),
        ),
        migrations.AddField(
            model_name='scenariostand',
            name='rx',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='trees.Rx'),
        ),
        migrations.AddField(
            model_name='scenariostand',
            name='scenario',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='trees.Scenario'),
        ),
        migrations.AddField(
            model_name='scenariostand',
            name='sharing_groups',
            field=models.ManyToManyField(blank=True, editable=False, null=True, related_name='trees_scenariostand_related', to='auth.Group', verbose_name='Share with the following groups'),
        ),
        migrations.AddField(
            model_name='scenariostand',
            name='stand',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='trees.Stand'),
        ),
        migrations.AddField(
            model_name='scenariostand',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='trees_scenariostand_related', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='myrx',
            name='rx',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='trees.Rx'),
        ),
        migrations.AddField(
            model_name='myrx',
            name='sharing_groups',
            field=models.ManyToManyField(blank=True, editable=False, null=True, related_name='trees_myrx_related', to='auth.Group', verbose_name='Share with the following groups'),
        ),
        migrations.AddField(
            model_name='myrx',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='trees_myrx_related', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterUniqueTogether(
            name='fvsaggregate',
            unique_together={('cond', 'offset', 'var', 'year', 'site', 'rx')},
        ),
        migrations.AddField(
            model_name='forestproperty',
            name='shared_scenario',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_DEFAULT, to='trees.Scenario'),
        ),
        migrations.AddField(
            model_name='forestproperty',
            name='sharing_groups',
            field=models.ManyToManyField(blank=True, editable=False, null=True, related_name='trees_forestproperty_related', to='auth.Group', verbose_name='Share with the following groups'),
        ),
        migrations.AddField(
            model_name='forestproperty',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='trees_forestproperty_related', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='carbongroup',
            name='excluded_properties',
            field=models.ManyToManyField(blank=True, related_name='excludedproperties_set', to='trees.ForestProperty'),
        ),
        migrations.AddField(
            model_name='carbongroup',
            name='members',
            field=models.ManyToManyField(related_name='members_set', through='trees.Membership', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='carbongroup',
            name='sharing_groups',
            field=models.ManyToManyField(blank=True, editable=False, null=True, related_name='trees_carbongroup_related', to='auth.Group', verbose_name='Share with the following groups'),
        ),
        migrations.AddField(
            model_name='carbongroup',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='trees_carbongroup_related', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterUniqueTogether(
            name='timberprice',
            unique_together={('variant', 'timber_type')},
        ),
        migrations.AlterUniqueTogether(
            name='membership',
            unique_together={('applicant', 'group')},
        ),
    ]
